%% This is a scratch pad for running erlang code
%% Everything is saved


req_pool_api:start_link().
req_pool_api:start_pool(req_pool, 2, {req_worker, start_link, []}).
req_pool_api:run(req_pool, ["http://reddit.com", self()]). % one way to do it will only allow 2 procs to run
req_pool_api:sync_queue(req_pool, ["http://reddit.com", self()]).
req_pool_api:sync_queue(req_pool, [<<"http%3A%2F%2Fdigg.com%2Frss%2Ftop.rss">>, self()]). 

erl -pa ./ebin -pa ./deps -pa ./deps/*/ebin
application:start(jiffy),
application:start(inets),
application:start(req_pool)

application:start(jiffy),application:start(inets),application:start(statsd),application:start(req_pool).
req_pool_api:start_pool(req_pool, 2, {req_worker, start_link, []}).
req_pool_api:sync_queue(req_pool, [<<"http%3A%2F%2Fdigg.com%2Frss%2Ftop.rss">>, self()]), 
req_pool_api:sync_queue(req_pool, [<<"http%3A%2F%2Fwww.reddit.com%2F.rss">>, self()]),
req_pool_api:sync_queue(req_pool, [<<"http%3A%2F%2Frss.nytimes.com%2Fservices%2Fxml%2Frss%2Fnyt%2FHomePage.xml">>, self()]).


req_pool_api:stop_pool(req_pool).
req_pool_api:stop().


{ok, File} = file:read_file("test/data/curated.txt").
RSS_Urls = string:tokens(binary_to_list(File), "\n").
lists:map( fun(X) -> io:format("~p~n", [X]) end, RSS_Urls).
http_uri:encode("http://00634ca.netsolhost.com/blog/?feed=rss2").

lists:map(
	fun(X) ->
      req_pool_api:sync_queue(req_pool,
							  [erlang:list_to_binary(http_uri:encode(X)),
							   self()])
	end,
	["http://00634ca.netsolhost.com/blog/?feed=rss2","http://00634ca.netsolhost.com/blog/?feed=rss2"]).

lists:map(
	fun(X) ->
      req_pool_api:sync_queue(req_pool,
							  [erlang:list_to_binary(http_uri:encode(X)),
							   self()])
	end,
	RSS_Urls).

% improvemensts
% # of workers = number of cores
%   Queue size for each pool?
%   getting this to work on another server
%   metering
%   driving tests
%   cleanner shut-down
%